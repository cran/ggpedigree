---
title: "Plotting more complicated pedigrees with `ggPedigree()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Plotting more complicated pedigrees with `ggPedigree()`}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.width = 7,
  fig.height = 5
)
```



# Introduction

This vignette demonstrates some of the more complex family trees you can visualization with `ggPedigree()`.

We illustrate usage with a more complicated data set from BGmisc:

- `asoiaf` â€“ extended Targaryen family


# Basic usage

```{r libraries, message=FALSE, warning=FALSE}

# Install remotes package if not already installed
if(!requireNamespace("remotes", quietly = TRUE)) {
  install.packages("remotes")
}

# Install your package from GitHub
remotes::install_github("R-Computing-Lab/BGmisc")
# unfortunately this requires BGmisc 1.4.0
library(ggpedigree) # ggPedigree lives here
library(BGmisc) # helper utilities & example data
library(ggplot2) # ggplot2 for plotting
library(viridis) # viridis for color palettes
library(tidyverse) # for data wrangling
```

## Load Packages and Data

We begin by loading the required libraries and examining the structure of the built-in `ASOIAF` pedigree.

```{r echo=TRUE, message=FALSE, warning=FALSE}
data(ASOIAF)
```

The ASOIAF dataset includes character IDs, names, family identifiers, and  parent identifiers for a subset of characters drawn from the *A Song of Ice and Fire* canon.

```{r}
head(ASOIAF)
```


# Data Cleaning

```{r}
df_got <- checkSex(ASOIAF,
  code_male = "M",
  code_female = "F",
  repair = TRUE
)


# Find the IDs of Jon Snow and Daenerys Targaryen

jon_id <- df_got %>%
  filter(name == "Jon Snow") %>%
  pull(ID)

dany_id <- df_got %>%
  filter(name == "Daenerys Targaryen") %>%
  pull(ID)
```

Here we've added phantom IDs to the dataset, which are used to represent individuals who are not directly related to the family tree but are still part of the pedigree structure. This is useful for visualizing complex relationships, such as half-siblings or step-siblings.

```{r}
df_repaired <- checkParentIDs(df_got,
  addphantoms = TRUE,
  repair = TRUE,
  parentswithoutrow = FALSE,
  repairsex = FALSE
) %>% mutate(
  famID = 1,
  affected = case_when(
    ID %in% c(jon_id, dany_id, "365") ~ 1,
    TRUE ~ 0
  )
)
```


## Visualize the Pedigree with `plotPedigree()`


Here is the classic pedigree plot of the Targaryen family, with Jon Snow and Daenerys Targaryen highlighted in black The `plotPedigree()` function from {BGmisc} provides a quick way to visualize the pedigree structure. It serves as a wrapper function from {kinship2} and is useful for quickly checking the pedigree structure.

```{r, message=FALSE, warning=FALSE}
plotPedigree(df_repaired,
  affected = df_repaired$affected,
  verbose = FALSE
)
```


## Visualize the Pedigree with `ggPedigree()`

Here is the same pedigree, but using `ggPedigree()` from {ggpedigree}. This function provides a more flexible and customizable way to visualize pedigrees, allowing for easy integration with other `ggplot2` functions.

```{r message=FALSE, warning=FALSE}


ggPedigreeInteractive(df_repaired,
  status_col = "affected",
  personID = "ID",
  config = list(
    status_unaffected_lab = 0,
    sex_color = TRUE,
    code_male = "M",
    status_affected_lab = 1,
    affected_shape = 4,
  #  ped_width = 14,
    include_tooltips = FALSE,
    label_nudge_y   = -.25,
    include_labels  = TRUE,
    label_method    = "geom_text",
    segment_self_color = "purple",
  tooltip_cols = c("name")
  )

)


```



